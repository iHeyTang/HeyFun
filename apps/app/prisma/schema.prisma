// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  // Read more: https://github.com/arthurfiorette/prisma-json-types-generator
  provider = "prisma-json-types-generator"
  allowAny = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users are now managed by Clerk, no need for a local Users table

model Organizations {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String
  personal  Boolean

  @@index([createdAt])
  @@index([ownerId])
}

model Preferences {
  id                  String   @id @default(cuid())
  organizationId      String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  language            String?
  /// [ModelInfo]
  defaultChatbotModel Json?
  /// [ModelInfo]
  defaultAgentModel   Json?
}

model OrganizationUsers {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId])
  @@index([organizationId, userId])
  @@index([userId])
}

model Tasks {
  id             String           @id @default(cuid())
  outId          String?          @unique
  llmId          String
  summary        String?
  prompt         String           @db.Text
  status         String           @default("pending")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String
  tools          Json             @default("[]")
  shareExpiresAt DateTime?
  progresses     TaskProgresses[]

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([createdAt])
}

model TaskProgresses {
  id             String   @id @default(cuid())
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  taskId         String
  index          Int
  round          Int      @default(1)
  step           Int
  type           String
  content        Json

  task Tasks @relation(fields: [taskId], references: [id])

  @@index([organizationId])
  @@index([organizationId, taskId])
  @@index([type])
  @@index([createdAt])
}

// @deprecated - 已废弃，新架构中不再使用
// Provider 配置已通过环境变量管理，模型配置在代码中统一维护
model LlmConfigs {
  id             String   @id @default(cuid())
  type           String
  model          String
  baseUrl        String
  apiKey         String
  maxTokens      Int
  maxInputTokens Int?
  temperature    Float
  apiType        String
  apiVersion     String?
  isActive       Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  name           String?

  @@index([organizationId])
  @@index([isActive])
}

// @deprecated - 已废弃，新架构中不再使用
// Provider 配置（API Keys）通过环境变量管理，不需要数据库存储
model ModelProviderConfigs {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  // provider id, identify certain provider, such as "openai"
  provider       String
  // if true, this is the default config for the same type of provider. it not used for now because we only have one config for each provider.
  isDefault      Boolean  @default(false)
  // config is a encrypted string, it contains the config for the provider. each provider has its own config schema.
  config         String   @db.Text

  @@index([organizationId])
  @@index([provider])
}

model AigcProviderConfigs {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  provider       String
  // config is a encrypted string, it contains the config for the provider. each provider has its own config schema.
  config         String   @db.Text

  @@unique([organizationId, provider])
  @@index([organizationId])
  @@index([provider])
}

model Agents {
  id                   String   @id @default(cuid())
  name                 String
  description          String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  organizationId       String
  systemPromptTemplate String?
  /// [JSONSchema] String[]
  tools                Json     @default("[]")
  /// [JSONSchema] Object with system, plan, next template strings
  promptTemplates      Json?
  isDefault            Boolean  @default(false)

  @@index([organizationId])
  @@index([createdAt])
  @@index([organizationId, isDefault])
}

model McpServerConfigs {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  organizationId  String
  name            String
  encryptedConfig String   @db.Text

  @@index([organizationId])
  @@index([createdAt])
}

enum AgentToolSource {
  STANDARD
  CUSTOM
}

model AgentTools {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  name           String?
  source         AgentToolSource
  schemaId       String?
  // for stdio
  env            String?
  // for sse
  query          String?
  headers        String?
  // for custom
  customConfig   String?

  schema ToolSchemas? @relation(fields: [schemaId], references: [id])

  @@unique([schemaId, organizationId])
  @@index([schemaId])
  @@index([organizationId])
  @@index([createdAt])
}

model ToolSchemas {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  description   String?  @db.Text
  repoUrl       String?
  /// Command for stdio
  command       String   @default("")
  /// [StringList] Args for stdio
  args          Json     @default("[]")
  /// [JSONSchema] EnvSchema for stdio
  envSchema     Json     @default("{}")
  /// Url for sse
  url           String   @default("")
  /// QuerySchema for sse
  querySchema   Json     @default("{}")
  /// [JSONSchema] HeadersSchema for sse
  headersSchema Json     @default("{}")

  // Enhanced fields for richer display
  logoUrl      String? // Logo/icon URL
  sourceUrl    String? // Source/homepage URL (GitHub, npm, etc.)
  author       String? // Tool author/maintainer
  version      String? // Current version
  license      String? // License type
  category     String? // Tool category (e.g., "development", "productivity", "ai")
  tags         Json      @default("[]") // [StringList] Tags for categorization
  /// [JSONSchema] Capabilities/tools provided by this MCP server
  capabilities Json      @default("[]")
  downloads    Int? // Download count if available
  stars        Int? // GitHub stars or similar rating
  lastUpdated  DateTime? // Last update from source
  readme       String?   @db.Text // Cached README content
  /// [JSONSchema] Additional metadata
  metadata     Json      @default("{}")

  AgentTools AgentTools[]

  @@index([name])
  @@index([createdAt])
  @@index([category])
  @@index([author])
}

model PaintboardTasks {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  // 任务基本信息
  service        String // 服务提供商：wan, doubao, jimeng
  model          String // 模型名称
  generationType String // 生成类型：text-to-image, image-to-image, text-to-video, image-to-video, keyframe-to-video
  /// [PaintboardTaskStatus]
  status         String @default("pending") // 任务状态：pending, processing, completed, failed

  // 任务参数和结果
  /// [PaintboardTaskParams]
  params  Json // 任务参数
  taskId  String? // 外部服务返回的任务ID
  /// [PaintboardTaskResult]
  results Json    @default("[]") // 结果数组，包含文件路径等信息

  // 错误信息
  error String? // 错误信息

  // 索引
  @@index([organizationId])
  @@index([organizationId, status])
  @@index([createdAt])
  @@index([service, model])
}

model ChatSessions {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  // 会话信息
  title         String? // 会话标题，可由第一条消息自动生成
  modelProvider String // 模型提供商
  modelId       String // 模型ID
  agentId       String? // 关联的Agent ID，不传则使用默认对话

  // 会话状态
  status String @default("active") // 会话状态：active, archived

  // 关联的消息
  messages ChatMessages[]

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([createdAt])
  @@index([agentId])
}

model ChatMessages {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sessionId      String
  organizationId String

  // 消息信息
  role    String // 角色：user, assistant, system, tool
  content String @db.Text // 消息内容

  // 流式输出相关
  isStreaming Boolean @default(false) // 是否正在流式输出
  isComplete  Boolean @default(false) // 是否完成输出

  // 元数据
  tokenCount   Int? // token数量
  finishReason String? // 完成原因

  // 工具调用相关
  /// [JSONSchema] ToolCall[]
  toolCalls  Json? // AI返回的工具调用
  toolCallId String? // 工具结果消息关联的toolCallId

  // 关联的会话
  session ChatSessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([organizationId])
  @@index([createdAt])
  @@index([role])
  @@index([toolCallId])
}

model FlowCanvasProjects {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String
  name           String
  schema         Json

  // 关联的 Agent 会话
  agentSessions FlowCanvasProjectAgentSessions[]

  @@index([organizationId])
  @@index([createdAt])
  @@index([name])
  @@index([organizationId, name])
}

// FlowCanvas 项目的 Agent 会话
// 每个 FlowCanvas 项目可以有多个独立的 Agent 会话
model FlowCanvasProjectAgentSessions {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  // 关联的 FlowCanvas 项目
  projectId String
  project   FlowCanvasProjects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // 会话信息
  title   String? // 会话标题，可由第一条消息自动生成
  modelId String // 模型ID
  agentId String? // 关联的Agent ID，不传则使用默认 Coordinator

  // 会话状态
  status String @default("active") // 会话状态：active, archived

  // 关联的消息
  messages FlowCanvasProjectAgentMessages[]

  @@index([organizationId])
  @@index([projectId])
  @@index([organizationId, projectId])
  @@index([organizationId, status])
  @@index([createdAt])
  @@index([agentId])
}

// FlowCanvas Agent 会话的消息
model FlowCanvasProjectAgentMessages {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sessionId      String
  organizationId String

  // 消息信息
  role    String // 角色：user, assistant, system, tool
  content String @db.Text // 消息内容

  // 流式输出相关
  isStreaming Boolean @default(false) // 是否正在流式输出
  isComplete  Boolean @default(false) // 是否完成输出

  // 元数据
  tokenCount   Int? // token数量
  finishReason String? // 完成原因

  // 工具调用相关
  /// [JSONSchema] ToolCall[]
  toolCalls  Json? // AI返回的工具调用
  toolCallId String? // 工具结果消息关联的toolCallId

  // 关联的会话
  session FlowCanvasProjectAgentSessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([organizationId])
  @@index([createdAt])
  @@index([role])
  @@index([toolCallId])
}

// 音色管理
model Voices {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  organizationId  String
  // 基本信息
  name            String
  description     String?
  // 提供商信息
  provider        String // 提供商标识
  model           String? // 使用的模型
  /// [StringList] 标签
  tags            Json     @default("[]")
  // 音频相关
  previewAudio    String? // 预览音频URL
  sourceAudio     String? // 源音频URL（用于克隆）
  // 外部音色ID
  externalVoiceId String? // 在第三方平台的音色ID
  // 额外配置
  /// [JSONSchema] 额外的provider特定配置
  extra           Json?
  // 状态
  status          String   @default("active") // active, creating, failed

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([provider])
  @@index([createdAt])
  @@index([name])
}

// 音色克隆任务
model VoiceCloneTasks {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  organizationId  String
  // 任务信息
  name            String
  description     String?
  provider        String
  status          String   @default("pending") // pending, processing, completed, failed
  // 音频文件
  /// [StringList] 音频文件URLs
  audioFiles      Json     @default("[]")
  // 配置参数
  /// [JSONSchema] 额外参数
  params          Json?
  // 结果
  voiceId         String? // 关联生成的Voice ID
  externalVoiceId String? // 第三方平台返回的音色ID
  error           String?  @db.Text

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([provider])
  @@index([createdAt])
}

model Credit {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String   @unique
  amount         Int      @default(0)

  @@index([organizationId])
  @@index([createdAt])
}

// 音色管理
model SystemVoices {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // 基本信息
  name            String
  description     String?
  // 提供商信息
  provider        String // 提供商标识
  model           String? // 使用的模型
  /// [StringList] 标签
  tags            Json     @default("[]")
  /// 音频
  audio           String   @default("")
  // 外部音色ID
  externalVoiceId String? // 在第三方平台的音色ID
  // 额外配置
  /// [JSONSchema] 额外的provider特定配置
  extra           Json?
  // 状态
  status          String   @default("active") // active, creating, failed

  @@index([provider])
  @@index([createdAt])
  @@index([name])
}
